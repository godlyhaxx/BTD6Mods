using MelonLoader;
using Assets.Scripts.Unity.UI_New.InGame;
using Assets.Scripts.Unity.Bridge;
using Assets.Scripts.Models.Towers.Behaviors.Attack;
using System.Linq;
using Assets.Scripts.Models;
using UnhollowerBaseLib;
using Assets.Scripts.Models.Towers.Projectiles.Behaviors;
using Assets.Scripts.Unity;
using System.Collections.Generic;
using Assets.Scripts.Models.Towers.Behaviors;
using Assets.Scripts.Models.Towers;
using Assets.Scripts.Models.GenericBehaviors;
using NKHook6.Api.Extensions;
using NKHook6.Api.Events;
using Assets.Scripts.Unity.UI_New.Popups;
using Assets.Scripts.Models.Towers.Upgrades;
using Assets.Scripts.Unity.Map;
using TMPro;
using Assets.Scripts.Models.Rounds;

namespace HypersonicAttempt
{

    public class Main : MelonMod
    {
        //Half this stuff is used from the BTDExpansion mod, everything thats happening is in the onEvent method, and the methods it calls. scroll all the
        //the way to the bottom for the cleaned version
        private static bool hasInitialized = false;
        public override void OnApplicationStart()
        {
            EventRegistry.instance.listen(typeof(Main));
            this.AddParts();
            MelonLogger.Log("using this mod will probably hackerpool you");
        }
        public override void OnUpdate()
        {
            if (Game.instance == null)
            {
                return;
            }
            if (Game.instance.model == null)
            {
                return;
            }
            if (Game.instance.model.towers == null)
            {
                return;
            }
            if (Main.hasInitialized)
            {
                this.OnUpdateInGame();
                return;
            }
            Main.hasInitialized = true;
           
        }
        public static bool UpgradesLock = false;
        public static bool free = false;
        public static bool fre5 = false;
        [NKHook6.Api.Events.Event("KeyPressEvent")]
        public static void onEvent(KeyEvent e)
        {
            
            string key = e.key + "";
            
            if (key == "F1")
            {
                GameExt.getBtd6Player(Game.instance).GainTrophies(500, "race");
            }
            if ((e.key.ToString() ?? "") == "F2")
            {
                GameExt.getBtd6Player(Game.instance).debugUnlockAllUpgrades = true;
                GameExt.getBtd6Player(Game.instance).debugUnlockAllTowers = true;
            }
            if ((e.key.ToString() ?? "") == "F2")
            {
                GameExt.getBtd6Player(Game.instance).debugUnlockAllModes = true;
            }
            if ((e.key.ToString() ?? "") == "F3")
            {
                GameExt.getBtd6Player(Game.instance).GainMonkeyMoney(2500, "race");
            }
            InGame game = InGame.instance;
            if (key.ToLower().Contains("numpad"))
            {
                NumPad(key);
            }
            if (game != null)
            {
                if ((e.key.ToString() ?? "") == "F5")
                {
                    game.setCash(game.getCash() + 5000);
                }
                if ((e.key.ToString() ?? "") == "F6")
                {
                    game.setHealth(game.getHealth() + 500);
                }
                if ((e.key.ToString() ?? "") == "F7")
                {
                    game.DeleteAllBloons();
                }
                if (key == "F8")
                {
                    game.lockHeroPurchases = false;
                    game.lockTowerPurchases = false;
                    game.lockTowerUpgrades = false;
                }
                if (key == "F9")
                {
                    foreach (AbilityToSimulation ability in InGameExt.getAbilities(game))
                    {
                        ability.ResetCooldown();
                    }
                }
            }
            if (game == null)
            {
                if (key == "F4")
                {
                    if (!free)
                    {
                        free = true;
                        MelonLogger.Log("Towers & upgrades are gonna be free");
                    }
                    else if (free)
                    {
                        free = false;
                        MelonLogger.Log("Towers & upgrades are no longer gonna be free");
                    }
                    free = true;
                }
            }
            if (key == "F10")
            {
                Help(1);
            }
            if (key == "F11")
            {
                Help(2);
            }
            if (key == "F12")
            {
            }
        }
        public static void Help(int type)
        {
            string monkname = "";
            System.Action<string> action = delegate (string s)
            {
                monkname = s;
            };
            switch (type)
            {
                case 1:
                    PopupScreen.instance.ShowSetNamePopup("Help (outside of game)", "F1 = 500 trophies\nF2 = unlock all game modes\nF3 = 2500 Monkey money\nF4 = Toggle free upgrades and towers\nDont fill box", action, "");
                    PopupScreen.instance.GetFirstActivePopup().background = PopupScreen.BackGround.Grey;
                    break;
                case 2:
                    PopupScreen.instance.ShowSetNamePopup("Help (inside of game)", "F5 = 5000 cash\nF6 = 500 health\nF7 = kill all balloons (no pop cash)\nF8 = unlock all upgrades and towers temporarily\nF9 = Resets Cooldowns\nDont fill box", action, "");
                    PopupScreen.instance.GetFirstActivePopup().background = PopupScreen.BackGround.Grey;
                    break;
                case 3:
                    //Numpad
                    break;
            }
        }
        public static void NumPad(string key)
        {
            key = key.ToLower();
            key = key.Replace("numpad", "");
            if (key == "0")
            {

            }
        }
        private void AddParts()
        {
            Main.partsToInit = new List<ConfigPart>
            {
                /*new ConfigPart
                {
                    section = "towers",
                    key = "God ninja enabled",
                    type = 0,
                    clazz = new CrossbowGod(),
                    Credits = "Me and I"
                }*/
            };
        }
        [Harmony.HarmonyPatch(typeof(MapLoader), "Load")]
        public class MapLoader_Path
        {
            [Harmony.HarmonyPostfix]
            public static void Postfix()
            {
                if (free)
                {
                    foreach (TowerModel tower in Game.instance.model.towers)
                    {
                        tower.cost = 0;
                    }
                    foreach (UpgradeModel upgradeModel in Game.instance.model.upgrades)
                    {
                        upgradeModel.cost = 0;
                    }
                }
            }
        }
        //bool add = false;
        private void OnUpdateInGame()
        {
            if (InGame.instance == null)
            {
                foreach (ConfigPart configPart in Main.partsToInit)
                {
                    if (configPart.clazz != null)
                    {
                        configPart.clazz.OnUpdateNoGame();
                    }
                }
            }
            if (InGame.instance == null)
            {
                return;
            }
            if (InGame.instance.bridge == null)
            {
                return;
            }
            foreach (ConfigPart configPart2 in Main.partsToInit)
            {
                if (configPart2.clazz != null)
                {
                    configPart2.clazz.OnUpdate(InGame.instance);
                }
            }
            
        }
        private static List<ConfigPart> partsToInit;
    }
    internal interface IModule
    {
        void Initialize(GameModel gameModel);
        void SetShouldRun(bool should);
        void OnUpdate(InGame currentGame);
        void OnUpdateNoGame();
    }
    internal class ConfigPart
    {
        public string section { get; set; }
        public string key { get; set; }
        public object defaultValue { get; set; }
        public int type { get; set; }
        public IModule clazz { get; set; }
        public string Credits
        {
            get
            {
                return this.credits;
            }
            set
            {
                this.credits = value;
            }
        }
        private string credits = "";
    }
}
